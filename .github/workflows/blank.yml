name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ sgp ]
  pull_request:
    branches: [ sgp ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_beckend:
    runs-on: dotnet
    steps:
      -
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Steps represent a sequence of tasks that will be executed as part of the job
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        name: Checkout

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: | 
          git status
          docker build -t luizhpriotto/sme-sgp-backend:dev -f src/SME.SGP.Api/Dockerfile .
          docker push luizhpriotto/sme-sgp-backend:dev 

      # Runs a set of commands using the runners shell
      - name: Run an ajdust of kubernetes dev
        env: # Ou como uma variável de ambiente
          RANCHER_URL_DEV: ${{ secrets.RANCHER_URL_DEV }}
          RANCHER_TOKEN_DEV: ${{ secrets.RANCHER_TOKEN_DEV }}
        run: |
          sed -e "s/\${RANCHER_URL}/$RANCHER_URL_DEV/" -e "s/\${RANCHER_TOKEN}/$RANCHER_TOKEN_DEV/" /runner/config_template > /runner/.kube/config
          kubectl get nodes
          rm -f /runner/.kube/config

  build_workerservice:
    runs-on: dotnet
    steps:
      -
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Steps represent a sequence of tasks that will be executed as part of the job
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        name: Checkout

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: | 
          git status
          docker build -t luizhpriotto/sme-workerservice:dev -f src/SME.SGP.WorkerService/Dockerfile .
          docker push luizhpriotto/sme-workerservice:dev 

      # Runs a set of commands using the runners shell
      - name: Run an ajdust of kubernetes dev
        env: # Ou como uma variável de ambiente
          RANCHER_URL_DEV: ${{ secrets.RANCHER_URL_DEV }}
          RANCHER_TOKEN_DEV: ${{ secrets.RANCHER_TOKEN_DEV }}
        run: |
          sed -e "s/\${RANCHER_URL}/$RANCHER_URL_DEV/" -e "s/\${RANCHER_TOKEN}/$RANCHER_TOKEN_DEV/" /runner/config_template > /runner/.kube/config
          kubectl get nodes
          rm -f /runner/.kube/config

  build_workerrabbit:
    runs-on: dotnet
    steps:
      -
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Steps represent a sequence of tasks that will be executed as part of the job
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        name: Checkout

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: | 
          git status
          docker build -t luizhpriotto/sme-worker-rabbit:dev -f src/SME.SGP.Worker.Rabbbit/Dockerfile .
          docker push luizhpriotto/sme-worker-rabbit:dev

      # Runs a set of commands using the runners shell
      - name: Run an ajdust of kubernetes dev
        env: # Ou como uma variável de ambiente
          RANCHER_URL_DEV: ${{ secrets.RANCHER_URL_DEV }}
          RANCHER_TOKEN_DEV: ${{ secrets.RANCHER_TOKEN_DEV }}
        run: |
          sed -e "s/\${RANCHER_URL}/$RANCHER_URL_DEV/" -e "s/\${RANCHER_TOKEN}/$RANCHER_TOKEN_DEV/" /runner/config_template > /runner/.kube/config
          kubectl get nodes
          rm -f /runner/.kube/config
